# Azure DevOps Pipeline: Build, Push, and Deploy Docker Image to Azure Web App
 
trigger:
- main
 
resources:
- repo: self
 
variables:
  dockerRegistryServiceConnection: 'eab42451-9d5c-45c1-a984-ad326b801bf3'
  imageRepository: 'sureshravicpythonacrdemo'
  containerRegistry: 'azurepythondemoacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  azureSubscription: 'sc-rg-azuredevops-demo'
  webAppName: 'pythondemodevops'
  resourceGroup: 'rg-azuredevops-demo'
 
stages:
# -----------------------------
# BUILD STAGE
# -----------------------------
- stage: Build
  displayName: "Build and Push Image to ACR"
  jobs:
  - job: Build
    displayName: "Build and Push"
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: "Build and Push Docker Image"
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
 
# -----------------------------
# RELEASE STAGE
# -----------------------------
- stage: Release
  displayName: "Deploy to Azure Web App"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: "Deploy Container to Web App"
    pool:
      vmImage: $(vmImageName)
    steps:
    # Optional - prints the tag being deployed
    - script: echo "Deploying tag $(tag) to $(webAppName)"
      displayName: "Show Deployment Info"
 
    # (1) Deploy the container using built-in task
    - task: AzureWebAppContainer@1
      displayName: "Deploy container to Azure Web App"
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(webAppName)
        containers: "$(containerRegistry)/$(imageRepository):$(tag)"
 
    # (2) Explicitly set container config to force update
    - task: AzureCLI@2
      displayName: "Force set container image to latest tag"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp config container set \
            --name $(webAppName) \
            --resource-group $(resourceGroup) \
            --docker-custom-image-name $(containerRegistry)/$(imageRepository):$(tag) \
            --docker-registry-server-url https://$(containerRegistry)
    
    # (3) Restart the web app to ensure image is pulled
    - task: AzureCLI@2
      displayName: "Restart Azure Web App"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp restart \
            --name $(webAppName) \
            --resource-group $(resourceGroup)
